{"version":3,"sources":["components/asyncComponent/index.js","components/echarts/index.jsx","components/echarts/options/line-option.js","components/echarts/charts/index.jsx","components/echarts/options/bar-option.js","components/echarts/options/pie-option.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","loadComponent","state","Component","this","hasLoadedComponent","then","module","default","setState","catch","err","console","error","props","React","pathObj","line","tooltip","trigger","formatter","xAxis","type","data","yAxis","series","bar","pie","legend","orient","x","name","radius","avoidLabelOverlap","label","normal","show","position","emphasis","textStyle","fontSize","fontWeight","labelLine","value","Echarts","obj","option","length","map","item","App","useState","dataSource","setData","setName","headers","authorization","accept","beforeUpload","file","fileList","slice","f","reader","FileReader","onload","e","target","result","workbook","XLSX","read","first_worksheet","Sheets","SheetNames","jsonArr","utils","sheet_to_json","header","val","push","readAsBinaryString","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bd1acdd.chunk.js","sourcesContent":["/**\n * Created by yongyuehuang on 2017/8/5.\n */\nimport React from 'react'\nconst asyncComponent = loadComponent => (\n  class AsyncComponent extends React.Component {\n    state = {\n      Component: null,\n    }\n    \n    componentWillMount() {\n      if (this.hasLoadedComponent()) {\n        return;\n      }\n      \n      loadComponent()\n      .then(module => module.default)\n      .then((Component) => {\n        this.setState({ Component });\n      })\n      .catch((err) => {\n        console.error(`Cannot load component in <AsyncComponent />`);\n        throw err;\n      });\n    }\n    \n    hasLoadedComponent() {\n      return this.state.Component != null;\n    }\n    \n    render() {\n      const { Component } = this.state;\n      return (Component) ? <Component {...this.props} /> : null;\n    }\n  }\n);\n\nexport default asyncComponent\n","import React from 'react'\nimport { lineCharts, barCharts, pieCharts } from './charts'\nimport { lineOption, barOption, pieOption } from './options'\nconst pathObj = {\n  line: [lineOption, lineCharts],\n  bar: [barOption, barCharts],\n  pie: [pieOption, pieCharts]\n}\n\nexport default props => {\n  const Echarts = pathObj[props.type][1]\n  const obj = { option: pathObj[props.type][0], ...props }\n  if (props.data.length > 0) {\n    if (props.type === 'pie') {\n      obj.option.series[0].data = [...props.data]\n    } else {\n      obj.option.series[0].data = props.data.map(item => item.value)\n      obj.option.xAxis.data = props.data.map(item => item.name)\n    }\n  }\n  obj.option.series[0].name = props.name\n  return <Echarts {...obj} />\n}\n","export default {\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c}'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line'\n    }\n  ]\n}\n","import asyncComponent from 'components/asyncComponent'\nexport const lineCharts =  asyncComponent(() => import('./lineChart'))\n\nexport const barCharts =  asyncComponent(() => import('./barChart'))\n\nexport const pieCharts =  asyncComponent(() => import('./pieChart'))","export default {\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c}'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [120, 200, 150, 80, 70, 110, 130],\n      type: 'bar'\n    }\n  ]\n}\n","export default {\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c}'\n  },\n  legend: {\n    orient: 'vertical',\n    x: 'left',\n    data: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎']\n  },\n  series: [\n    {\n      name: '访问来源',\n      type: 'pie',\n      radius: ['50%', '70%'],\n      avoidLabelOverlap: false,\n      label: {\n        normal: {\n          show: false,\n          position: 'center'\n        },\n        emphasis: {\n          show: true,\n          textStyle: {\n            fontSize: '30',\n            fontWeight: 'bold'\n          }\n        }\n      },\n      labelLine: {\n        normal: {\n          show: false\n        }\n      },\n      data: [\n        { value: 335, name: '直接访问' },\n        { value: 310, name: '邮件营销' },\n        { value: 234, name: '联盟广告' },\n        { value: 135, name: '视频广告' },\n        { value: 1548, name: '搜索引擎' }\n      ]\n    }\n  ]\n}\n","import React, { useState } from 'react'\nimport './App.css'\nimport Charts from 'components/echarts'\nimport { Upload, Icon, Button } from 'antd'\nimport XLSX from 'xlsx'\n\nfunction App() {\n  const [dataSource, setData] = useState([])\n  const [name, setName] = useState('')\n  const props = {\n    name: 'file',\n    headers: {\n      authorization: 'authorization-text'\n    },\n    accept:\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet .xlsx',\n    beforeUpload: (file, fileList) => {\n      setName(file.name.slice(0, -5))\n      var rABS = true\n      const f = fileList[0]\n      var reader = new FileReader()\n      reader.onload = function(e) {\n        var data = e.target.result\n        if (!rABS) data = new Uint8Array(data)\n        var workbook = XLSX.read(data, {\n          type: rABS ? 'binary' : 'array'\n        })\n        // 假设我们的数据在第一个标签\n        var first_worksheet = workbook.Sheets[workbook.SheetNames[0]]\n        // XLSX自带了一个工具把导入的数据转成json\n        var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 })\n        // 通过自定义的方法处理Json，比如加入state来展示\n        jsonArr = jsonArr.slice(1)\n        const dataSource = []\n        for (const val of jsonArr) {\n          if (val.length > 0) {\n            dataSource.push({\n              value: val[0],\n              name: val[1]\n            })\n          }\n        }\n        setData(dataSource)\n        // handleImpotedJson(jsonArr.slice(1));\n      }\n      if (rABS) reader.readAsBinaryString(f)\n      else reader.readAsArrayBuffer(f)\n      return false\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Upload {...props}>\n          <Button>\n            <Icon type=\"upload\" /> Select File\n          </Button>\n        </Upload>\n      </header>\n      <Charts type=\"line\" data={dataSource} name={name} />\n      <Charts type=\"bar\" data={dataSource} name={name} />\n      <Charts type=\"pie\" data={dataSource} name={name} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}